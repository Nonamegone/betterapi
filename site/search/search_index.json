{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Links Legendware.pw How to use? Download to this directory %appdata%/Legendware/scripts or to Steam/steamapps/common/Counter-Strike Global Offensive/lua and run this code in your script: require ( 'betterapi' ) print ( misc . scriptname ()) Download Source","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#links","text":"Legendware.pw","title":"Links"},{"location":"#how-to-use","text":"Download to this directory %appdata%/Legendware/scripts or to Steam/steamapps/common/Counter-Strike Global Offensive/lua and run this code in your script: require ( 'betterapi' ) print ( misc . scriptname ()) Download Source","title":"How to use?"},{"location":"draw/","text":"draw draw.set_clip(x, y, w, h) + draw.end_clip() Variable Type x Number y Number w Number h Number Example: client . add_callback ( 'on_paint' , function () draw . set_clip ( 150 , 150 , 150 , 150 ) draw . filled_rect ( 100 , 100 , 400 , 400 , 255 , 255 , 255 , 255 ) draw . end_clip () end ) draw.line(x0, y0, x1, y1, clr) Variable Type x Number y Number x1 Number y1 Number clr color_t Example: client . add_callback ( 'on_paint' , function () draw . line ( 100 , 100 , 200 , 200 , 255 , 255 , 255 , 255 ) end ) draw.rect(x, y, w, h, clr, rounding) Variable Type x Number y Number w Number h Number clr color_t rounding Number Example: client . add_callback ( 'on_paint' , function () draw . rect ( 100 , 150 , 100 , 100 , color_t . new ( 255 , 255 , 255 , 255 ), 5 ) end ) draw.filled_rect(x, y, w, h, clr, rounding) Variable Type x Number y Number w Number h Number clr color_t rounding Number Example: client . add_callback ( 'on_paint' , function () draw . filled_rect ( 100 , 150 , 100 , 100 , color_t . new ( 255 , 255 , 255 , 255 ), 5 ) end ) draw.gradientrect(x, y, w, h, clr, clr2, horizontal) Variable Type x Number y Number w Number h Number clr color_t clr2 color_t horizontal Boolean Example: client . add_callback ( 'on_paint' , function () draw . gradientrect ( 100 , 100 , 150 , 20 , color_t . new ( 255 , 255 , 255 ), color_t . new ( 0 , 0 , 0 ), true ) end ) draw.polygon(vertices, clipvertices, clr) Variable Type vertices vec2 Table clipvertices Boolean clr color_t Example: local vertices = { vec2 . new ( 100 , 150 ), vec2 . new ( 110 , 150 ), vec2 . new ( 100 , 150 )} -- up to infinite client . add_callback ( 'on_paint' , function () draw . polygon ( vertices , false , color_t . new ( 255 , 255 , 255 , 255 )) end ) draw.polyline(vertices, clr) Variable Type vertices vec2 Table clr color_t Example: local vertices = { vec2 . new ( 100 , 150 ), vec2 . new ( 110 , 150 ), vec2 . new ( 100 , 150 )} -- up to infinite client . add_callback ( 'on_paint' , function () draw . polyline ( vertices , color_t . new ( 255 , 255 , 255 , 255 )) end ) draw.init_rgba(data, w, h) -- TODO draw.rgba(datatbl, x, y, w, h, alpha) -- TODO draw.init_font(name, h, weight, blur, flags) Variable Type name String h Number weight Number blur Number flags Number Table Return Value font id Tip You can see all flags here Example: local font = draw . init_font ( 'Verdana' , 12 , 12 , 0 , { EFontFlags ( 'DROPSHADOW' )}) draw.get_textsize(font, text) Variable Type font Number text String Return Value vec2 x,y Example: local size = draw . get_textsize ( font , 'Hello world!' ) print ( tostring ( size . x )) print ( tostring ( size . y )) draw.text(font, x, y, clr, text) Variable Type font Number clr color_t text String Example: client . add_callback ( 'on_paint' , function () draw . text ( font , 50 , 50 , 255 , 255 , 255 , 255 , 'Hello world!' ) end ) draw.text_centered(font, x, y, clr, text, centered_x, centered_y) Variable Type font Number clr color_t text String centered_x Boolean centered_y Boolean Example: client . add_callback ( 'on_paint' , function () draw . text_centered ( font , 50 , 50 , 255 , 255 , 255 , 255 , 'Hello world!' , true , true ) end )","title":"Draw"},{"location":"draw/#draw","text":"","title":"draw"},{"location":"draw/#drawset_clipx-y-w-h-drawend_clip","text":"Variable Type x Number y Number w Number h Number Example: client . add_callback ( 'on_paint' , function () draw . set_clip ( 150 , 150 , 150 , 150 ) draw . filled_rect ( 100 , 100 , 400 , 400 , 255 , 255 , 255 , 255 ) draw . end_clip () end )","title":"draw.set_clip(x, y, w, h) + draw.end_clip()"},{"location":"draw/#drawlinex0-y0-x1-y1-clr","text":"Variable Type x Number y Number x1 Number y1 Number clr color_t Example: client . add_callback ( 'on_paint' , function () draw . line ( 100 , 100 , 200 , 200 , 255 , 255 , 255 , 255 ) end )","title":"draw.line(x0, y0, x1, y1, clr)"},{"location":"draw/#drawrectx-y-w-h-clr-rounding","text":"Variable Type x Number y Number w Number h Number clr color_t rounding Number Example: client . add_callback ( 'on_paint' , function () draw . rect ( 100 , 150 , 100 , 100 , color_t . new ( 255 , 255 , 255 , 255 ), 5 ) end )","title":"draw.rect(x, y, w, h, clr, rounding)"},{"location":"draw/#drawfilled_rectx-y-w-h-clr-rounding","text":"Variable Type x Number y Number w Number h Number clr color_t rounding Number Example: client . add_callback ( 'on_paint' , function () draw . filled_rect ( 100 , 150 , 100 , 100 , color_t . new ( 255 , 255 , 255 , 255 ), 5 ) end )","title":"draw.filled_rect(x, y, w, h, clr, rounding)"},{"location":"draw/#drawgradientrectx-y-w-h-clr-clr2-horizontal","text":"Variable Type x Number y Number w Number h Number clr color_t clr2 color_t horizontal Boolean Example: client . add_callback ( 'on_paint' , function () draw . gradientrect ( 100 , 100 , 150 , 20 , color_t . new ( 255 , 255 , 255 ), color_t . new ( 0 , 0 , 0 ), true ) end )","title":"draw.gradientrect(x, y, w, h, clr, clr2, horizontal)"},{"location":"draw/#drawpolygonvertices-clipvertices-clr","text":"Variable Type vertices vec2 Table clipvertices Boolean clr color_t Example: local vertices = { vec2 . new ( 100 , 150 ), vec2 . new ( 110 , 150 ), vec2 . new ( 100 , 150 )} -- up to infinite client . add_callback ( 'on_paint' , function () draw . polygon ( vertices , false , color_t . new ( 255 , 255 , 255 , 255 )) end )","title":"draw.polygon(vertices, clipvertices, clr)"},{"location":"draw/#drawpolylinevertices-clr","text":"Variable Type vertices vec2 Table clr color_t Example: local vertices = { vec2 . new ( 100 , 150 ), vec2 . new ( 110 , 150 ), vec2 . new ( 100 , 150 )} -- up to infinite client . add_callback ( 'on_paint' , function () draw . polyline ( vertices , color_t . new ( 255 , 255 , 255 , 255 )) end )","title":"draw.polyline(vertices, clr)"},{"location":"draw/#drawinit_rgbadata-w-h","text":"-- TODO","title":"draw.init_rgba(data, w, h)"},{"location":"draw/#drawrgbadatatbl-x-y-w-h-alpha","text":"-- TODO","title":"draw.rgba(datatbl, x, y, w, h, alpha)"},{"location":"draw/#drawinit_fontname-h-weight-blur-flags","text":"Variable Type name String h Number weight Number blur Number flags Number Table Return Value font id Tip You can see all flags here Example: local font = draw . init_font ( 'Verdana' , 12 , 12 , 0 , { EFontFlags ( 'DROPSHADOW' )})","title":"draw.init_font(name, h, weight, blur, flags)"},{"location":"draw/#drawget_textsizefont-text","text":"Variable Type font Number text String Return Value vec2 x,y Example: local size = draw . get_textsize ( font , 'Hello world!' ) print ( tostring ( size . x )) print ( tostring ( size . y ))","title":"draw.get_textsize(font, text)"},{"location":"draw/#drawtextfont-x-y-clr-text","text":"Variable Type font Number clr color_t text String Example: client . add_callback ( 'on_paint' , function () draw . text ( font , 50 , 50 , 255 , 255 , 255 , 255 , 'Hello world!' ) end )","title":"draw.text(font, x, y, clr, text)"},{"location":"draw/#drawtext_centeredfont-x-y-clr-text-centered_x-centered_y","text":"Variable Type font Number clr color_t text String centered_x Boolean centered_y Boolean Example: client . add_callback ( 'on_paint' , function () draw . text_centered ( font , 50 , 50 , 255 , 255 , 255 , 255 , 'Hello world!' , true , true ) end )","title":"draw.text_centered(font, x, y, clr, text, centered_x, centered_y)"},{"location":"entlist/","text":"entlist entlist.get_players(num) Variable Type Description num Number Type Return Value Table of players num = 0 - enemies only num = 1 - teammates only num = 2 - all players Example: local playerstable = entlist . get_players ( num ) for k , v in pairs ( playerstable ) do print ( v : get_health ()) end entlist.find_by_class(class) Variable Type Description class String Name of this class Return Value Entity that have this class name Example: local chicken = entlist . find_by_class ( CChicken ) print ( tostring ( chicken : get_prop_bool ( 'CChicken' , 'm_jumpedThisFrame' ))) -- Maybe:D entlist.get_player_resource() Return Value CCSPlayerResource entity Example: local CCSPlayerResource = entlist . get_player_resource () print ( tostring ( CCSPlayerResource : get_prop_int ( 'CCSPlayerResource' , 'm_iPlayerC4' ))) -- Maybe:D","title":"EntityList"},{"location":"entlist/#entlist","text":"","title":"entlist"},{"location":"entlist/#entlistget_playersnum","text":"Variable Type Description num Number Type Return Value Table of players num = 0 - enemies only num = 1 - teammates only num = 2 - all players Example: local playerstable = entlist . get_players ( num ) for k , v in pairs ( playerstable ) do print ( v : get_health ()) end","title":"entlist.get_players(num)"},{"location":"entlist/#entlistfind_by_classclass","text":"Variable Type Description class String Name of this class Return Value Entity that have this class name Example: local chicken = entlist . find_by_class ( CChicken ) print ( tostring ( chicken : get_prop_bool ( 'CChicken' , 'm_jumpedThisFrame' ))) -- Maybe:D","title":"entlist.find_by_class(class)"},{"location":"entlist/#entlistget_player_resource","text":"Return Value CCSPlayerResource entity Example: local CCSPlayerResource = entlist . get_player_resource () print ( tostring ( CCSPlayerResource : get_prop_int ( 'CCSPlayerResource' , 'm_iPlayerC4' ))) -- Maybe:D","title":"entlist.get_player_resource()"},{"location":"enums/","text":"EFontFlags NONE ITALIC UNDERLINE STRIKEOUT SYMBOL ANTIALIAS GAUSSIANBLUR ROTARY DROPSHADOW ADDITIVE OUTLINE CUSTOM Example: local font = draw . init_font ( 'Verdana' , 12 , 12 , 0 , { EFontFlags ( 'DROPSHADOW' )})","title":"Enums"},{"location":"enums/#efontflags","text":"NONE ITALIC UNDERLINE STRIKEOUT SYMBOL ANTIALIAS GAUSSIANBLUR ROTARY DROPSHADOW ADDITIVE OUTLINE CUSTOM Example: local font = draw . init_font ( 'Verdana' , 12 , 12 , 0 , { EFontFlags ( 'DROPSHADOW' )})","title":"EFontFlags"},{"location":"examples/","text":"Examples with BetterAPI Clip require ( 'betterapi' ) local font = draw . init_font ( 'Verdana' , 12 , 12 , 0 , { EFontFlags ( 'DROPSHADOW' )}) local triangleSize = 14 local boxSize = { x = 200 , y = 200 , w = 400 , h = 200 } local drag = { x = 0 , y = 0 } local drug = false local inBox = function ( x , y , w , h , x1 , y1 ) return x1 > x and x1 < x + w and y1 > y and y1 < y + h end client . add_callback ( 'on_paint' , function () local cpos = input . getcursorpos () local boxX = boxSize . x + boxSize . w - triangleSize local boxY = boxSize . y + boxSize . h - triangleSize local cond = input . keystate ( 0x01 ) and inBox ( boxX , boxY , triangleSize , triangleSize , cpos . x , cpos . y ) if not drug and cond then drug = true drag . x = boxX - cpos . x + triangleSize drag . y = boxY - cpos . y + triangleSize end if drug and not input . keystate ( 0x01 ) then drug = false end if drug then boxSize . w = math.max (( drag . x + cpos . x ) - boxSize . x , 10 ) boxSize . h = math.max (( drag . y + cpos . y ) - boxSize . y , 10 ) end draw . filled_rect ( boxSize . x , boxSize . y , boxSize . w , boxSize . h , 40 , 40 , 40 , 255 ) local vertices = { vec2 . new ( boxSize . x + boxSize . w , boxSize . y + boxSize . h ), vec2 . new ( boxSize . x + boxSize . w - triangleSize , boxSize . y + boxSize . h ), vec2 . new ( boxSize . x + boxSize . w , boxSize . y + boxSize . h - triangleSize )} draw . set_clip ( 200 , 200 , boxSize . w , boxSize . h ) draw . text ( font , 200 , 200 , 255 , 255 , 255 , 255 , 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Convallis posuere morbi leo urna molestie at. Odio eu feugiat pretium nibh ipsum consequat nisl. Eu facilisis sed odio morbi quis commodo. Ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant. Felis eget nunc lobortis mattis aliquam. Hac habitasse platea dictumst quisque sagittis purus sit amet volutpat. Libero enim sed faucibus turpis in eu. Eu lobortis elementum nibh tellus. Eu ultrices vitae auctor eu. Eu augue ut lectus arcu bibendum at varius vel.' ) draw . polygon ( vertices , true , 60 , 60 , 60 , 255 ) draw . end_clip () end )","title":"Example"},{"location":"examples/#examples-with-betterapi","text":"Clip require ( 'betterapi' ) local font = draw . init_font ( 'Verdana' , 12 , 12 , 0 , { EFontFlags ( 'DROPSHADOW' )}) local triangleSize = 14 local boxSize = { x = 200 , y = 200 , w = 400 , h = 200 } local drag = { x = 0 , y = 0 } local drug = false local inBox = function ( x , y , w , h , x1 , y1 ) return x1 > x and x1 < x + w and y1 > y and y1 < y + h end client . add_callback ( 'on_paint' , function () local cpos = input . getcursorpos () local boxX = boxSize . x + boxSize . w - triangleSize local boxY = boxSize . y + boxSize . h - triangleSize local cond = input . keystate ( 0x01 ) and inBox ( boxX , boxY , triangleSize , triangleSize , cpos . x , cpos . y ) if not drug and cond then drug = true drag . x = boxX - cpos . x + triangleSize drag . y = boxY - cpos . y + triangleSize end if drug and not input . keystate ( 0x01 ) then drug = false end if drug then boxSize . w = math.max (( drag . x + cpos . x ) - boxSize . x , 10 ) boxSize . h = math.max (( drag . y + cpos . y ) - boxSize . y , 10 ) end draw . filled_rect ( boxSize . x , boxSize . y , boxSize . w , boxSize . h , 40 , 40 , 40 , 255 ) local vertices = { vec2 . new ( boxSize . x + boxSize . w , boxSize . y + boxSize . h ), vec2 . new ( boxSize . x + boxSize . w - triangleSize , boxSize . y + boxSize . h ), vec2 . new ( boxSize . x + boxSize . w , boxSize . y + boxSize . h - triangleSize )} draw . set_clip ( 200 , 200 , boxSize . w , boxSize . h ) draw . text ( font , 200 , 200 , 255 , 255 , 255 , 255 , 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Convallis posuere morbi leo urna molestie at. Odio eu feugiat pretium nibh ipsum consequat nisl. Eu facilisis sed odio morbi quis commodo. Ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant. Felis eget nunc lobortis mattis aliquam. Hac habitasse platea dictumst quisque sagittis purus sit amet volutpat. Libero enim sed faucibus turpis in eu. Eu lobortis elementum nibh tellus. Eu ultrices vitae auctor eu. Eu augue ut lectus arcu bibendum at varius vel.' ) draw . polygon ( vertices , true , 60 , 60 , 60 , 255 ) draw . end_clip () end )","title":"Examples with BetterAPI"},{"location":"fs/","text":"fs fs.createdir(path) Variable Type Description path String Path to create directory Example: fs . createdir ( 'C:/BetterAPI' ) fs.download(from, to) Variable Type Description from String Url to read to String Path to write Example: fs . download ( 'https://pastebin.com/raw/Q5rDZCPJ' , 'C:/BetterAPI/Gnome.lua' ) fs.addfont(path) Variable Type Description path String Path to font Example: fs . addfont ( 'C:/BetterAPI/gnomefont.ttf' ) fs.scriptpath() Return Value Path to script that launched it Example: local scriptpath = fs . scriptpath ()","title":"File system"},{"location":"fs/#fs","text":"","title":"fs"},{"location":"fs/#fscreatedirpath","text":"Variable Type Description path String Path to create directory Example: fs . createdir ( 'C:/BetterAPI' )","title":"fs.createdir(path)"},{"location":"fs/#fsdownloadfrom-to","text":"Variable Type Description from String Url to read to String Path to write Example: fs . download ( 'https://pastebin.com/raw/Q5rDZCPJ' , 'C:/BetterAPI/Gnome.lua' )","title":"fs.download(from, to)"},{"location":"fs/#fsaddfontpath","text":"Variable Type Description path String Path to font Example: fs . addfont ( 'C:/BetterAPI/gnomefont.ttf' )","title":"fs.addfont(path)"},{"location":"fs/#fsscriptpath","text":"Return Value Path to script that launched it Example: local scriptpath = fs . scriptpath ()","title":"fs.scriptpath()"},{"location":"input/","text":"input input.keystate(code) Variable Type Description code Number Button KeyCode Return Value true or false Tip You can see all keycodes here Example: client . add_callback ( 'on_paint' , function () if input . keystate ( 0x01 ) then print ( 'LMB pressed' ) end end ) input.getcursorpos() Return Value X coordinate Y coordinate Example: client . add_callback ( 'on_paint' , function () local cursorpos = input . getcursorpos () print ( 'X coordinate: ' .. cursorpos . x ) print ( 'Y coordinate: ' .. cursorpos . y ) end )","title":"Input"},{"location":"input/#input","text":"","title":"input"},{"location":"input/#inputkeystatecode","text":"Variable Type Description code Number Button KeyCode Return Value true or false Tip You can see all keycodes here Example: client . add_callback ( 'on_paint' , function () if input . keystate ( 0x01 ) then print ( 'LMB pressed' ) end end )","title":"input.keystate(code)"},{"location":"input/#inputgetcursorpos","text":"Return Value X coordinate Y coordinate Example: client . add_callback ( 'on_paint' , function () local cursorpos = input . getcursorpos () print ( 'X coordinate: ' .. cursorpos . x ) print ( 'Y coordinate: ' .. cursorpos . y ) end )","title":"input.getcursorpos()"},{"location":"memory/","text":"memory memory.find_process(name) Variable Type name String Example: memory . find_process ( 'csgo.exe' ) memory.find_module(name) Variable Type Description name String Name of the module Return Value module handle Example: local client_dll = memory . find_module ( 'client.dll' ) memory.readmemory(t, offset, add) Variable Type Description t String C type to return offset handle Handle of the module add int Prop offset Return Value What you asked for in t Example: local offsets = { dwLocalPlayer = 0xDA747C , index = 0x64 , } -- 10.11.2021 local lp = memory . readmemory ( \"void*\" , client_dll , offsets . dwLocalPlayer ) local lp_index = memory . readmemory ( \"int\" , ffi . cast ( \"int\" , lp ), offsets . index ) print ( tostring ( lp_index )) -- Prints local player index memory.writememory(t, offset, add, value) Variable Type Description t String C type to write offset handle Handle of the module add int Prop offset value ??? What you need to write Example: -- TODO","title":"Memory"},{"location":"memory/#memory","text":"","title":"memory"},{"location":"memory/#memoryfind_processname","text":"Variable Type name String Example: memory . find_process ( 'csgo.exe' )","title":"memory.find_process(name)"},{"location":"memory/#memoryfind_modulename","text":"Variable Type Description name String Name of the module Return Value module handle Example: local client_dll = memory . find_module ( 'client.dll' )","title":"memory.find_module(name)"},{"location":"memory/#memoryreadmemoryt-offset-add","text":"Variable Type Description t String C type to return offset handle Handle of the module add int Prop offset Return Value What you asked for in t Example: local offsets = { dwLocalPlayer = 0xDA747C , index = 0x64 , } -- 10.11.2021 local lp = memory . readmemory ( \"void*\" , client_dll , offsets . dwLocalPlayer ) local lp_index = memory . readmemory ( \"int\" , ffi . cast ( \"int\" , lp ), offsets . index ) print ( tostring ( lp_index )) -- Prints local player index","title":"memory.readmemory(t, offset, add)"},{"location":"memory/#memorywritememoryt-offset-add-value","text":"Variable Type Description t String C type to write offset handle Handle of the module add int Prop offset value ??? What you need to write Example: -- TODO","title":"memory.writememory(t, offset, add, value)"},{"location":"misc/","text":"misc misc.scriptname() Return Value The name of the script that did this Example: local name = misc . scriptname () print ( 'Wow, your script is called \"' .. name .. '\", good name!' )","title":"Misc"},{"location":"misc/#misc","text":"","title":"misc"},{"location":"misc/#miscscriptname","text":"Return Value The name of the script that did this Example: local name = misc . scriptname () print ( 'Wow, your script is called \"' .. name .. '\", good name!' )","title":"misc.scriptname()"},{"location":"modifications/","text":"API modifications ffi.class(ctype, values, typedef) Variable Type ctype String values classmember Table typedef String Example: ffi . class ( \"IClientRenderable\" , { GetModel = classmember ( \"model_t*(__thiscall*)(void*)\" , 8 ), SetupBones = classmember ( \"bool(__thiscall*)(void*, matrix3x4_t* pBoneToWorldOut, int nMaxBones, int boneMask, float currentTime)\" , 13 ) }) menu.get_color_t(path) Variable Type path String Example: menu . add_color ( 'color' ) client . add_callback ( 'on_paint' , function () local clr = menu . get_color_t ( 'color' ) draw . rect ( 100 , 100 , 100 , 100 , clr , 5 ) end )","title":"API modifications"},{"location":"modifications/#api-modifications","text":"","title":"API modifications"},{"location":"modifications/#fficlassctype-values-typedef","text":"Variable Type ctype String values classmember Table typedef String Example: ffi . class ( \"IClientRenderable\" , { GetModel = classmember ( \"model_t*(__thiscall*)(void*)\" , 8 ), SetupBones = classmember ( \"bool(__thiscall*)(void*, matrix3x4_t* pBoneToWorldOut, int nMaxBones, int boneMask, float currentTime)\" , 13 ) })","title":"ffi.class(ctype, values, typedef)"},{"location":"modifications/#menuget_color_tpath","text":"Variable Type path String Example: menu . add_color ( 'color' ) client . add_callback ( 'on_paint' , function () local clr = menu . get_color_t ( 'color' ) draw . rect ( 100 , 100 , 100 , 100 , clr , 5 ) end )","title":"menu.get_color_t(path)"},{"location":"panorama/","text":"panorama TODO","title":"Panorama"},{"location":"panorama/#panorama","text":"","title":"panorama"},{"location":"panorama/#todo","text":"","title":"TODO"},{"location":"sengine/","text":"sengine sengine.colorprint(color, text) Variable Type Description color color Color to print text String Text to print Example: sengine . colorprint ( color . new ( 255 , 30 , 20 ), 'Hello world! \\n ' ) sengine.chatprint(text) Variable Type Description text String Text to print Example: sengine . chatprint ( 'Ah shit, here we go again' )","title":"Source engine"},{"location":"sengine/#sengine","text":"","title":"sengine"},{"location":"sengine/#senginecolorprintcolor-text","text":"Variable Type Description color color Color to print text String Text to print Example: sengine . colorprint ( color . new ( 255 , 30 , 20 ), 'Hello world! \\n ' )","title":"sengine.colorprint(color, text)"},{"location":"sengine/#senginechatprinttext","text":"Variable Type Description text String Text to print Example: sengine . chatprint ( 'Ah shit, here we go again' )","title":"sengine.chatprint(text)"},{"location":"classes/entity/","text":"entity","title":"entity"},{"location":"classes/entity/#entity","text":"","title":"entity"},{"location":"classes/player/","text":"player player:is_alive() Return Value bool Is player alive or not Example: local lp = entitylist . get_local_player () print ( tostring ( lp : is_alive ())) player:gethitboxpos(hitbox_id) Variable Type Description hitbox_id Number Id of hitbox you want to know position Return Value vector position Example: client . add_callback ( 'on_paint' , function () local lp = entitylist . get_local_player () local headpos = lp : gethitboxpos ( 0 ) local pos2d = render . world_to_screen ( headpos ) if not pos2d then return end render . draw_rect_filled ( pos2d . x - 7.5 , pos2d . y - 7.5 , 15 , 15 , color . new ( 255 , 100 , 100 ) ) end )","title":"Player"},{"location":"classes/player/#player","text":"","title":"player"},{"location":"classes/player/#playeris_alive","text":"Return Value bool Is player alive or not Example: local lp = entitylist . get_local_player () print ( tostring ( lp : is_alive ()))","title":"player:is_alive()"},{"location":"classes/player/#playergethitboxposhitbox_id","text":"Variable Type Description hitbox_id Number Id of hitbox you want to know position Return Value vector position Example: client . add_callback ( 'on_paint' , function () local lp = entitylist . get_local_player () local headpos = lp : gethitboxpos ( 0 ) local pos2d = render . world_to_screen ( headpos ) if not pos2d then return end render . draw_rect_filled ( pos2d . x - 7.5 , pos2d . y - 7.5 , 15 , 15 , color . new ( 255 , 100 , 100 ) ) end )","title":"player:gethitboxpos(hitbox_id)"}]}